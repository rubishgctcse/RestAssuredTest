/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'maven'

apply plugin: 'application'

mainClassName = 'com.gradle.LibraryTest'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
    mavenCentral()
}

configurations {
 scm
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'
	
    scm 'org.eclipse.jgit:org.eclipse.jgit:4.9.2.201712150930-r'
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    compile gradleApi()
}

//task wrapper(type: wrapper) {
//	gradleVersion = '4.5.1'
//}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}

sourceSets {
    main.java.srcDir "src/main/java"
    test.java.srcDir "src/test/java"
}

jar {
	manifest {
  		attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': '0.1.0',
                   'Main-Class': 'com.gradle.LibraryTest'
    }
}

test {
	filter {
			includeTestsMatching "*gradle*"
			//include '**/service/**'
		}
	beforeTest { descriptor ->
       logger.lifecycle("Running test: $descriptor.className")
    }
       testLogging {
        // Show that tests are run in the command-line output
        events 'started', 'passed'
        exceptionFormat = 'full'
    }
    
  //System.properties.each { k,v->
    //    println "$k = $v"
    //}

  // show standard out and standard error of the test JVM(s) on the console
  testLogging.showStandardStreams = true

  // set heap size for the test JVM(s)
  minHeapSize = "128m"
  maxHeapSize = "512m"

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
  
  maxParallelForks = 4
  systemProperties = [
            BROWSER: System.getProperty('BROWSER', 'chrome')
  ]
}

task display(type:DisplayTask) {
    srcDir = file('src/main/java/com/gradle/util')
}
 
class DisplayTask extends DefaultTask {
 
    @SkipWhenEmpty
    @InputDirectory
    File srcDir
 
    DisplayTask() {
        description = 'Show contents of files'
    }
 
    @TaskAction
    void printMessages() {
        srcDir.eachFile { file ->
            println file.text
        }
    }
 
}

tasks.withType(JavaExec) {
    // Assign all Java system properties from
    // the command line to the JavaExec task.
    systemProperties System.properties
}
